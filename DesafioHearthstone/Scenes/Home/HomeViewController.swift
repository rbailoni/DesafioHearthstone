//
//  HomeViewController.swift
//  DesafioHearthstone
//
//  Created by Ricardo Bailoni on 09/04/20.
//  Copyright (c) 2020 Ricardo Bailoni. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

fileprivate struct Constants {
    static let constraintHalf: CGFloat = 0.5
    static let constraint08: CGFloat = 8
    static let constraint40: CGFloat = 40
    static let constraint55: CGFloat = 55
    static let constraint160: CGFloat = 160
    static let fontSize40: CGFloat = 40
    static let titleHome = "Hearthstone"
    static let priority250 = UILayoutPriority(250)
    
    private init() {}
}

protocol HomeDisplayLogic: class {
    func displayDeckSessions(viewModel: Home.DeckSessions.ViewModel)
    func displayError(error: ResponseError)
    func displayCards()
}

class HomeViewController: UIViewController, HomeDisplayLogic {
    private var interactor: HomeBusinessLogic?
    private var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    private lazy var titleHome: UILabel = {
        return UILabel()
    }()
    
    private lazy var separatorTitle: UIView = {
        return UIView()
    }()
    
    private lazy var scrollView: UIScrollView = {
        return UIScrollView()
    }()

    private lazy var contentView: UIView = {
        return UIView()
    }()
    
    private lazy var spinner: UIActivityIndicatorView = {
        return UIActivityIndicatorView(style: .whiteLarge)
    }()
    
    private lazy var refreshControl: UIRefreshControl = {
        return UIRefreshControl()
    }()
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        viewCodeSetup()
        fetchDeckSessions()
    }
    
    @objc private func fetchDeckSessions() {
        interactor?.fetchDeckSessions()
    }
    
    func displayDeckSessions(viewModel: Home.DeckSessions.ViewModel) {
        var deckSessions = [DeckSession]()
        contentView.subviews.forEach { $0.removeFromSuperview() }
        guard let sessions = viewModel.sessions else { return }
        for (key, value) in sessions {
            let deckSession = DeckSession()
            deckSession.title = key
            deckSession.titleDecks = value
            deckSession.delegate = self
            deckSessions.append(deckSession)
            contentView.addSubview(deckSession)
        }
        setConstraintDeckSessions(sessions: deckSessions)
        refreshControl.endRefreshing()
        spinner.stopAnimating()
    }
    
    func displayError(error: ResponseError) {
        self.showError(error: error)
        refreshControl.endRefreshing()
        spinner.stopAnimating()
    }
    
    private func setConstraintDeckSessions(sessions: [DeckSession]) {
        for (index, session) in sessions.enumerated() {
            session.translatesAutoresizingMaskIntoConstraints = false
            if session == sessions.first {
                session.topAnchor.constraint(equalTo: contentView.topAnchor).isActive = true
            } else {
                session.topAnchor.constraint(equalTo: sessions[index - 1].bottomAnchor).isActive = true
            }
            
            session.leadingAnchor.constraint(equalTo: contentView.leadingAnchor).isActive = true
            session.trailingAnchor.constraint(equalTo: contentView.trailingAnchor).isActive = true
            session.heightAnchor.constraint(equalToConstant: Constants.constraint160).isActive = true
            
            if session == sessions.last {
                session.bottomAnchor.constraint(equalTo: contentView.bottomAnchor).isActive = true
            }
        }
    }
    
    func displayCards() {
        router?.routeToCards(segue: nil)
    }
}

extension HomeViewController: ViewCodeProtocol {
    func viewHierarchySetup() {
        view.addSubview(titleHome)
        view.addSubview(separatorTitle)
        view.addSubview(scrollView)
        scrollView.addSubview(contentView)
        contentView.addSubview(spinner)
    }
    
    func viewConstraintSetup() {
        setConstraintsTitleHome()
        setConstraintsSeparatorTitle()
        setConstraintsScrollView()
        setConstraintsContentView()
        setConstraintsSpinner()
    }
    
    private func setConstraintsTitleHome() {
        titleHome.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor, constant: Constants.constraint40).isActive = true
        titleHome.leadingAnchor.constraint(equalTo: self.view.leadingAnchor, constant: Constants.constraint40).isActive = true
        titleHome.trailingAnchor.constraint(equalTo: self.view.trailingAnchor, constant: -Constants.constraint40).isActive = true
        titleHome.heightAnchor.constraint(equalToConstant: Constants.constraint55).isActive = true
    }
    
    private func setConstraintsSeparatorTitle() {
        separatorTitle.topAnchor.constraint(equalTo: titleHome.bottomAnchor, constant: Constants.constraint08).isActive = true
        separatorTitle.leadingAnchor.constraint(equalTo: titleHome.leadingAnchor).isActive = true
        separatorTitle.trailingAnchor.constraint(equalTo: self.view.trailingAnchor).isActive = true
        separatorTitle.heightAnchor.constraint(equalToConstant: Constants.constraintHalf).isActive = true
    }
    
    private func setConstraintsScrollView() {
        scrollView.topAnchor.constraint(equalTo: separatorTitle.bottomAnchor, constant: Constants.constraint08).isActive = true
        scrollView.bottomAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.bottomAnchor).isActive = true
        scrollView.leadingAnchor.constraint(equalTo: self.view.leadingAnchor).isActive = true
        scrollView.trailingAnchor.constraint(equalTo: self.view.trailingAnchor).isActive = true
    }
    
    private func setConstraintsContentView() {
        contentView.topAnchor.constraint(equalTo: scrollView.topAnchor).isActive = true
        contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor).isActive = true
        contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor).isActive = true
        contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor).isActive = true
        contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor).isActive = true
        contentView.heightAnchor.constraint(equalTo: scrollView.heightAnchor).usePriority(Constants.priority250).isActive = true
    }
    
    private func setConstraintsSpinner() {
        spinner.centerXAnchor.constraint(equalTo: contentView.centerXAnchor).isActive = true
        spinner.centerYAnchor.constraint(equalTo: contentView.centerYAnchor).isActive = true
    }
    
    func viewThemeSetup() {
        view.backgroundColor = .background
        titleHome.translatesAutoresizingMaskIntoConstraints = false
        titleHome.font = UIFont.avenirBlack(Constants.fontSize40)
        titleHome.textColor = .preto
        titleHome.text = Constants.titleHome
        separatorTitle.translatesAutoresizingMaskIntoConstraints = false
        separatorTitle.backgroundColor = .white
        refreshControl.addTarget(self, action: #selector(fetchDeckSessions), for: .valueChanged)
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.showsHorizontalScrollIndicator = false
        scrollView.showsVerticalScrollIndicator = false
        scrollView.refreshControl = refreshControl
        contentView.translatesAutoresizingMaskIntoConstraints = false
        spinner.translatesAutoresizingMaskIntoConstraints = false
        spinner.hidesWhenStopped = true
        spinner.color = .preto
        spinner.startAnimating()
    }
}

extension HomeViewController: DeckSessionDelegate {
    func didSelectDeck(session: String, name: String) {
        interactor?.setSelectedDeck(session: session, name: name)
    }
}
